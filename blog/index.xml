<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>:thinking: Blog on Haruaki TAMADA</title>
    <link>https://tamada.github.io/blog/</link>
    <description>Recent content in :thinking: Blog on Haruaki TAMADA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Nov 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tamada.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to get version defined in pom.xml</title>
      <link>https://tamada.github.io/blog/20211104-vfp/</link>
      <pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/blog/20211104-vfp/</guid>
      <description>Getting ways of the version defined in pom.xml  Constant Property Package Module   What the case in the use of native-image?  Result of Measurements   Summary References  Getting ways of the version defined in pom.xml Java 17が出たことだし，いい加減に Java のモジュールシステムを本格的に使いだそうとしている． 最近のJavaの自作ツールは一応モジュール対応にしたつもり（pochi，vhcなど）．
で，ビルドツールは Maven を使うことが多いのだけど，pom.xml で設定したバージョン情報をアプリケーションからどんな情報で取得できるかを確認してみた．
次の4つの方法に分類できる．
 Constant: 自分でバージョンの文字列をString型リテラルとしてソースコードに書き込む． Property: src/main/resourcesにプロパティファイルとしてバージョン情報を置いておく． Package: MANIFEST.MFに書かれている Implementation-VersionやSpecification-Versionのいずれかを利用する． Module: ModuleDescriptorのversionメソッドから利用する．  それぞれの分類を独断と偏見で４段階で評価してみた（1が良くて，４が悪い）．
    Constant Property Package Module     わかりやすさ 1 2 3 4   取得のしやすさ 1 2 2 2   自動化 3 2 1 3    分かりやすさはバージョン番号取得ルーチンをみたときのわかりやすさ．Constantは単なる変数参照なので一番わかりやすいであろう．Propertyはプロパティファイルを探し，読み込み，エントリを取得する，という３段階が必要となる．</description>
    </item>
    
    <item>
      <title>Programming Languages</title>
      <link>https://tamada.github.io/blog/20211021_programming_languages/</link>
      <pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/blog/20211021_programming_languages/</guid>
      <description>とあるユーティリティプログラムを作成しようと思ったものの，どのような言語で作成しようかと悩み中． 希望としては，ワンバイナリが生成可能，ジェネリクスあり，ストリーム処理，あたりが扱えると嬉しい． また，クロスコンパイルしたいし，書きやすい（EtoW; Easy to Write）言語であると嬉しい．
で，まとめてみた．
   Language One Binary Generics Stream Cross Compile EtoW     Java GraalVM OK OK Hard OK   Go OK 1.17- No OK OK   Rust OK? OK ??? OK? No   Node.js ??? ??? OK N/A OK   Python ??? OK? ??? ??? OK   Kotlin OK? OK OK OK ???    Java は GraalVM を使うとバイナリを作成できるけど，面倒． GraalVM を使ってもクロスコンパイルは難しいんじゃないかな． GitHub Actions などを使えばクロスコンパイルはできそうだけど，面倒だなぁ．</description>
    </item>
    
    <item>
      <title>Renewed my web site with cayman-hugo-theme.</title>
      <link>https://tamada.github.io/blog/20201110_new_design/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/blog/20201110_new_design/</guid>
      <description>ホームページのデザインを更新した． ふと思い立って，ホームページのデザインを更新してみた． 作成したプロダクトのデザインは cayman-hugo-theme に統一していたので，個人ページも同じテーマを採用してみた．
雑感 以前使っていたHugo Swiftに対して思っていた要望が解消されたかな？
 トップのサイン波のアニメーションを変えたい．  -&amp;gt; なくなった．   ハンバーガーメニューが気に入らない．  -&amp;gt; なくなった．    </description>
    </item>
    
    <item>
      <title>Renewed my web site with hugo-theme-swift.</title>
      <link>https://tamada.github.io/blog/20200320_new_design/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/blog/20200320_new_design/</guid>
      <description>ホームページのデザインを更新した． ふと思い立って，ホームページのデザインを更新してみた． 今までは，hugo-cards を使っていたのをHugo Swift を使うことにした．
欲しかった要件  config.tomlにごちゃごちゃと書かない． dataでの記述は最小限に． shortcodesにあまり依存しない．  この要件はあくまで好みである．
困ったこと Hugo などの静的サイトジェネレータでコメント投稿をサポートするために，Staticmanがリリースされている． Hugo SwiftはこのStaticmanを標準でサポートしている． しかし，設定方法にあるように設定して，コメントを投稿しても，500 Internal Server Errorになる． どうも，https://staticman3.herokuapp.com/v3/entry/github/tamada/tamada.github.io/master/comments に投稿しても，Staticman の中から GitHub へのリクエスト URL でリポジトリの情報が失われているっぽい． 設定項目は飛ばしていないつもりだけど，なぜだろう．．．
Hugo のレイアウトのコツ いくつかのサイトを Hugo で構築して，レイアウトのコツのようなものがわかった．
生成されたHTML と themes/XXXXXX/layouts/{_default,partials} 以下の内容を確認し，変更したい内容をトップのlayoutsにコピーして編集すると良い．
雑感 Hugo Swiftには概ね満足なのだが，次の2つの項目を変えたい．
サイン波のアニメーション トップのサイン波のアニメーションを変更するのが難しい． 変更自体は簡単なんだけど，変更してしまうと，サイトとしてイケてない． かといってそのままだと，デザインそのままな感じがする． とりあえず放置．
ハンバーガーメニューが気に入らない． 個人的にハンバーガーメニューが気に入らない． 世間的にもハンバーガーメニューはダメだという意見があるようだ．
 君たちはそんなにハンバーガーメニューが好きなのかね？ The Hamburger Menu Doesn&amp;rsquo;t Work  これもとりあえずは放置．
というところでリリースした． Staticmanについてはまた今度挑戦してみる．</description>
    </item>
    
  </channel>
</rss>