<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Haruaki TAMADA</title>
    <link>https://tamada.github.io/tags/java/</link>
    <description>Recent content in java on Haruaki TAMADA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Aug 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tamada.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Obfuscation by invokedynamic</title>
      <link>https://tamada.github.io/research/obfuscation_by_invokedynamic/</link>
      <pubDate>Sat, 01 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/research/obfuscation_by_invokedynamic/</guid>
      <description>:speaking_head: Overview This paper proposes an obfuscation method against illegal analysis. The proposed method tries to build a fake call flow graph from debugging tools. The call flow graph represents relations among methods and helps understanding of a program. The fake call flow graph leads misunderstanding of the program. We focus on a hook mechanism of the method call for changing a callee. We conduct two experiments to evaluate the proposed method.</description>
    </item>
    
    <item>
      <title>Method folding obfuscation</title>
      <link>https://tamada.github.io/research/obfuscation_by_method_folding/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/research/obfuscation_by_method_folding/</guid>
      <description>:speaking_head: Overview To improve tamper resistance of programs against illegal modification, this paper proposes instruction folding applicable to Java platform.
In the proposed method, at first, similar methods are selected in a Java program. Next, these methods are merged into one method and diffs among these methods are stored in the program. Then, at runtime, when one of the merged methods is executed, diffs are restored by self-modification, which is realized by the Java instrumentation mechanism.</description>
    </item>
    
    <item>
      <title>Obfuscation by dynamic name resolution</title>
      <link>https://tamada.github.io/research/obfuscation_by_dnr/</link>
      <pubDate>Tue, 12 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/research/obfuscation_by_dnr/</guid>
      <description>:speaking_head: Overview Name obfuscation is a software protection technique, which renames identifiers in a given program, to protect the program from illegal cracking. The conventional methods replace names appearing in the declaration part with the meaningless ones. Therefore, the methods cannot be used to obfuscate names declared in system libraries, since changing such system-defined names significantly deteriorates the program portability.
This paper presents a new name obfuscation method, which can hide appearance of the system-defined names.</description>
    </item>
    
  </channel>
</rss>