<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>evaluating obfuscation on Haruaki TAMADA</title>
    <link>https://tamada.github.io/tags/evaluating-obfuscation/</link>
    <description>Recent content in evaluating obfuscation on Haruaki TAMADA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://tamada.github.io/tags/evaluating-obfuscation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>De-obfuscate DNR</title>
      <link>https://tamada.github.io/research/deobfuscating_dnr/</link>
      <pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/research/deobfuscating_dnr/</guid>
      <description>:speaking_head: Overview Using unevaluated obfuscation methods has a significant risk since the methods might have some vulnerabilities. One evaluation for obfuscation is de-obfuscation which discloses the hidden information by the obfuscation. This paper proposed the de-obfuscation method against for DNR (dynamic name resolution) obfuscation method. DNR hides system-defined names by encrypting them and resolves names dynamically during runtime. This paper clarifies the steps of de-obfuscation and proposes static and dynamic manners to de-obfuscate DNR.</description>
    </item>
    
    <item>
      <title>Identifying the applied obfuscator</title>
      <link>https://tamada.github.io/research/identifying_applied_obfuscator/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/research/identifying_applied_obfuscator/</guid>
      <description>:speaking_head: Overview Recently, to prevent cracking, the various protection methods have been proposed. One of the protection methods is the obfuscation method. Obfuscation method changes the program into hard to understand for hiding secret information in the program.
On the other hand, de-obfuscation is an interesting research topic for protecting the software. Since, though vulnerable protection methods are dangerous, measuring the robustness of the method was not discussed.
In this paper, we tackle to identify the applied obfuscation methods towards de-obfuscation.</description>
    </item>
    
    <item>
      <title>De-obfuscate IRM</title>
      <link>https://tamada.github.io/research/deobfuscating_identifier_renaming/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/research/deobfuscating_identifier_renaming/</guid>
      <description>:speaking_head: Overview The obfuscation methods are often used to hide sensitive information in software. Especially, an identifier renaming method (IRM) is well used because it is easy to implement. IRM is one of the obfuscation methods, and to change the names of function, and variables into meaningless one. However, if we can restore the identifiers to the original names, IRM is invalidated. One of the serious problems about IRM is that the tolerance against de-obfuscation is not discussed.</description>
    </item>
    
    <item>
      <title>Artificiality evaluation of obfuscations</title>
      <link>https://tamada.github.io/research/artificiality_evaluation/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/research/artificiality_evaluation/</guid>
      <description>:speaking_head: Overview This research topic tries to evaluate the artificialities of the obfuscated programs. We believe that the obfuscation changes the programs into unordinal ones. This topics evaluates the artificialities by tf-idf and perplexities.
:books: Publications  横井 昂典，玉田 春昭，”使用クラスに基づいたTF-IDFによる難読化の不自然さ評価”，2017年暗号と情報セキュリティシンポジウム予稿集 (SCIS 2017)，3D1-4，January 2017.（沖縄，那覇） 大滝 隆貴，大堂 哲也，玉田 春昭，神崎 雄一郎，門田 暁人，”Javaバイトコード命令のオペコード、オペランドを用いた難読化手法のステルシネス評価”，2014年暗号と情報セキュリティシンポジウム予稿集 (SCIS2014), 2D2-2, January 2014.  :mag_right: Related Research Topics  Identifying the applied obfuscator De-obfuscate IRM (identifier renaming method) Evaluating obfuscation method by Kolmogorov complexity Unreadability evaluation of obfuscated programs  :handshake: Collaborators  Y.</description>
    </item>
    
    <item>
      <title>Evaluating obfuscation method by Kolmogorov complexity</title>
      <link>https://tamada.github.io/research/evaluation_obfuscation_kolmogorov/</link>
      <pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/research/evaluation_obfuscation_kolmogorov/</guid>
      <description>:speaking_head: Overview This paper quantifies the diffuculty of program analysis based on the information theory. The basic idea is to consider that a program ultimately obscated if instructions appear at random; that is (1) all instructions has an equal frequency of appearance, and (2) there is no pattern observed in the instruction sequence. We quantified (1) based on the entropy and (2) based on the Kolmogorov complexity. We evaluated the feasibility of our proposal through a case study.</description>
    </item>
    
  </channel>
</rss>
