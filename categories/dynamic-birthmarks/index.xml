<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dynamic birthmarks on Haruaki TAMADA</title>
    <link>https://tamada.github.io/categories/dynamic-birthmarks/</link>
    <description>Recent content in dynamic birthmarks on Haruaki TAMADA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Aug 2006 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tamada.github.io/categories/dynamic-birthmarks/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dynamic birthmarks</title>
      <link>https://tamada.github.io/research/dynamic_birthmarks/</link>
      <pubDate>Tue, 01 Aug 2006 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/research/dynamic_birthmarks/</guid>
      <description>ðŸ—£ Overview This paper presents a technique of dynamic software birthmarks to support efficient detection of software theft. A dynamic birthmark $f(p, I)$ is a set of unique and native characteristics of a program $p$, obtained by executing $p$ with a given input $I$. For a pair of software $p$ and $q$, if $f(p, I) = f(q, I)$ holds, $q$ is suspected as a copy of $p$. In this paper, we propose two kinds of dynamic birthmarks, EXESEQ and EXEFREQ which use execution order and frequency distribution of runtime API Calls.</description>
    </item>
    
  </channel>
</rss>