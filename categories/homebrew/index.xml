<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>homebrew on Haruaki TAMADA</title>
    <link>https://tamada.github.io/categories/homebrew/</link>
    <description>Recent content in homebrew on Haruaki TAMADA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tamada.github.io/categories/homebrew/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>:beers: Homebrew</title>
      <link>https://tamada.github.io/projects/homebrew/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/projects/homebrew/</guid>
      <description>🗣 Overview Tamada&amp;rsquo;s homebrew receipes. Following receipes are available.
 rrh  Git repository manager. Histories  1.2.0: 2020-04-24, add open subcommand. 1.1.0: 2019-12-18, add group info subcommand. 1.0.4: 2019-07-13, introduce --dry-run option for rrh-new subcommand. 1.0.3: 2019-06-29, print belonging groups on running rrh repository info. 1.0.2: 2019-06-29, introduce rrh-new external subcommand. 1.0.1: 2019-06-26, fixed invalid command results on rrh group. 1.0.0: 2019-06-18, the first public release.     uniq2  Extended uniq.</description>
    </item>
    
    <item>
      <title>sibling</title>
      <link>https://tamada.github.io/projects/sibling/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/projects/sibling/</guid>
      <description>🗣 Overview When the directory has too may sub directories, we are tiresome to traverse whole of them. Because, we lose where we are. Ideally, we move directory by specifying the next, not directory name.
The command like following makes us tired 👎 .
cd ../next_directory_name We should type command like below 👍 .
cdnext For this, I implemented sibling.
🍺 Install brew install tamada/brew/sibling 🌐 Web pages  Project page on GitHub  https://github.</description>
    </item>
    
    <item>
      <title>omelette</title>
      <link>https://tamada.github.io/projects/omelette/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/projects/omelette/</guid>
      <description>🗣 Overview In the Java platform, we usually run the unit tests through some build tool, such as Maven, Gradle, and so on. However, it is hard to run the unit tests on the cli environment, since it is not clearly to execute them. Also, computing coverage makes us more complicated.
Then, omelette runs unit tests of given project and compute test coverage by Jacoco.
🍺 Install $ brew install tamada/brew/omelette 🌐 Web pages  Project page on GitHub  https://github.</description>
    </item>
    
    <item>
      <title>uniq2</title>
      <link>https://tamada.github.io/projects/uniq2/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/projects/uniq2/</guid>
      <description>🗣 Overview uniq2 deletes duplicated lines.
GNU core utilities have uniq command for deleting duplicate lines. However, uniq command deletes only continuous duplicate lines. When deleting not continuous duplicate lines, we use sort command together, in that case, the order of the list was not kept.
We want to delete not continuous duplicated lines with remaining the order.
🐳 Docker  tamada/uniq2 (https://hub.docker.com/r/tamada/uniq2)  1.1.1, latest 1.0.2    🍺 Install $ brew tap tamada/brew # &amp;lt;- the first time only.</description>
    </item>
    
    <item>
      <title>heatman</title>
      <link>https://tamada.github.io/projects/heatman/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/projects/heatman/</guid>
      <description>🗣 Overview Create heat map image from given csv file. Go language implementation of tamada/heatman.
🍺 Install $ brew tap tamada/brew # &amp;lt;- the first time only. $ brew install heatman 🐳 Docker  tamada/heatman (https://hub.docker.com/r/tamada/heatman)  1.0.1, latest    🌐 Web pages  Project page on GitHub  https://github.com/tamada/goheatman   Web page  https://tamada.github.io/goheatman    📜 License WTFPL
 WTFPL permits  👍 Commercial use, 👍 Modification, 👍 Distribution, and 👍 Private use.</description>
    </item>
    
    <item>
      <title>lioss</title>
      <link>https://tamada.github.io/projects/lioss/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/projects/lioss/</guid>
      <description>🗣 Overview License identifying tool for OSS projects. This tool has license database, and analyzes given license by $k$-gram, word frequencies, or tfidf algorithm.
🍺 Install $ brew tap tamada/brew # &amp;lt;- the first time only. $ brew install lioss 🐳 Docker  tamada/lioss (https://hub.docker.com/r/tamada/lioss)  0.9.0, latest    $ docker run -it --rm -v $PWD:/home/lioss tamada/lioss:latest [OPTIONS] [ARGUMENTS...] 🌐 Web pages  Project page on GitHub  https://github.</description>
    </item>
    
    <item>
      <title>tjdoe</title>
      <link>https://tamada.github.io/projects/tjdoe/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/projects/tjdoe/</guid>
      <description>🗣 Overview tjdoe anonymizes given programs for programming courses and their scores for grades. For this, tjdoe converts names and ids appearing in the programs into anonymized ids.
tjdoe is abbreviation of &amp;ldquo;to john/jane doe.&amp;rdquo;
🍺 Install $ brew tap tamada/brew # &amp;lt;- the first time only. $ brew install tjdoe 🐳 Docker  tamada/tjdoe (https://hub.docker.com/r/tamada/tjdoe)  1.0.0, latest    🌐 Web pages  Project page on GitHub  https://github.</description>
    </item>
    
    <item>
      <title>pochi</title>
      <link>https://tamada.github.io/projects/pochi/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/projects/pochi/</guid>
      <description>🗣 Overview pochi is the birthmarking toolkit for the JVM platform. The birthmarks are the native characteristics extracted from executable programs. Then, pochi compares them and computes the similarities. The resultant similarities shows the copy relation possibilities between two program.
🍺 Install $ brew tap tamada/brew # &amp;lt;- the first time only. $ brew install pochi 🐳 Docker  tamada/pochi (https://hub.docker.com/r/tamada/pochi)  1.0.0, latest    $ docker run -it --rm -v $PWD:/home/pochi tamada/pochi:latest [OPTIONS] [SCRIPT [ARGUMENTS.</description>
    </item>
    
    <item>
      <title>rrh</title>
      <link>https://tamada.github.io/projects/rrh/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/projects/rrh/</guid>
      <description>🗣 Overview rrh is a simple git repository manager.
There are too many repositories. We love programming; however, to manage many repositories is quite hard and bothersome tasks. Therefore, we built a headquarter for managing the git repositories, named rrh. rrh manages repositories by categorizing in groups and execute git command to the groups.
I know the tool ghq, manages the git repositories. However, I cannot use it for the following reasons.</description>
    </item>
    
    <item>
      <title>9rules</title>
      <link>https://tamada.github.io/projects/9rules/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/projects/9rules/</guid>
      <description>🗣 Overview 9rules evaluates the how to satisfy the 9 rules for the object oriented programming exercise. OOP execise was introduced by the ThoughtWorks Anthology.
The rules are as follows.
 Rule # 1. Use one level of indentation per method. Rule # 2. Do not use the else keyword. Rule # 3. Wrap all primitives and Strings. Rule # 4. Use only one dot per line.  Except the following items.</description>
    </item>
    
    <item>
      <title>ttt</title>
      <link>https://tamada.github.io/projects/ttt/</link>
      <pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tamada.github.io/projects/ttt/</guid>
      <description>🗣 Overview このツールは，KSU ISEにおける各コースの終了要件を単位取得科目から確認するためのツールです． ttt は「単位をたくさん取ろう」の頭文字です．
なお，このツールを使った事による不利益は，いかなる場合であっても一切保証しません．
🍺 Install $ brew tap tamada/brew # &amp;lt;- the first time only. $ brew install ttt 🐳 Docker  tamada/ttt (https://hub.docker.com/r/tamada/ttt)  1.0.0, latest    🌐 Web pages  Project page on GitHub  https://github.com/tamada/ttt   Web page  https://tamada.github.io/ttt (Only Japanese) https://tamada.github.io/ttt/checker.html  executing ttt online.      📜 License WTFPL
 WTFPL permits  👍 Commercial use, 👍 Modification, 👍 Distribution, and 👍 Private use.</description>
    </item>
    
  </channel>
</rss>